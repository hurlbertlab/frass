plot(data$Weight_Raw, data$Weight_Sorted, main = "Frass Weight Comparison (mg.)", xlab = "Weight Raw", ylab = "Weight Sorted", pch = 17, cex = 1, col = 'red')
plot(data$Weight_Raw[data$Weight_Raw<50], data$Weight_Sorted[data$Weight_Raw<50],main = "Frass Weight Comparison (mg.)", xlab = "Weight Raw", ylab = "Weight Sorted", pch = 17, cex = 1, col = 'red')
abline(raw_sort_outlier_excl)
library("gsheet", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
# Script for analyzing frass data
frassLoad = function(open = T, write = F) {
require(gsheet)
url = "https://docs.google.com/spreadsheets/d/1RwXzwhHUbP0m5gKSOVhnKZbS1C_NrbdfHLglIVCzyFc/edit#gid=806965256"
data = gsheet2tbl(url)
if (write) {
# Write a copy
write.csv(data, paste('data/frass_', Sys.Date(), '.csv', sep = ''),
row.names = F)
}
if (open) { return (data) }
}
data = frassLoad(open = T)
dataWO = data[data$Weight_Raw < 50,]
# Linear model
raw_sort = lm(Weight_Sorted ~ Weight_Raw, data = data)
raw_sort_outlier_excl = lm(Weight_Sorted ~ Weight_Raw, data = dataWO)
sort_img = lm(Img_Sorted ~ Weight_Sorted, data = dataWO)
#Plotting
plot(data$Weight_Raw, data$Weight_Sorted, main = "Frass Weight Comparison (mg.)", xlab = "Weight Raw", ylab = "Weight Sorted", pch = 17, cex = 1, col = 'red')
plot(data$Weight_Raw[data$Weight_Raw<50], data$Weight_Sorted[data$Weight_Raw<50],main = "Frass Weight Comparison (mg.)", xlab = "Weight Raw", ylab = "Weight Sorted", pch = 17, cex = 1, col = 'red')
abline(raw_sort_outlier_excl)
# Plotting frass density or mass over time
library(gsheet)
library(dplyr)
library(tidyr)
# Function for reading in frass data from GoogleDoc
# *if aim is to backup GoogleDoc and write to disk only, then open =F and write = T
# *if aim is to use data without writing to disk, then open = T and write = F
frassData = function(open = F, write = F) {
require(gsheet)
url = "https://docs.google.com/spreadsheets/d/1RwXzwhHUbP0m5gKSOVhnKZbS1C_NrbdfHLglIVCzyFc/edit#gid=1479231778"
data = gsheet2tbl(url)
if (write) {
# Write a copy
write.csv(data, paste('data/frass_', Sys.Date(), '.csv', sep = ''),
row.names = F)
}
if (open) { return (data) }
}
# Function that takes a date field (formatted as %m/%d/%Y) and a time field
# (hh:mm in 24h time), converts the date to julian day and adds the fractional
# day represented by the hours and minutes
julianDayTime = function(date, hour_min) {
require(lubridate)
jday = yday(date)
temp = sapply(strsplit(hour_min, ":"), function(x) {
x = as.numeric(x)
x[1] + x[2]/60
})
output = jday + temp/24
return(output)
}
# Function for plotting frass phenology
#   minReliability is the minimum reliability score for including in the analysis.
#    3 - reliable, no obvious problems
#    2 - frass traps wet, or potential minor issues
#    1 - major problems, unreliable frass data
frassplot = function(frassdata, inputSite, year, color = 'black', new = T,
var = 'mass', minReliability = 0, xlab = 'Julian day', ylab = '', ...) {
temp = filter(frassdata, site == inputSite, Year == year, reliability >= minReliability) %>%
data.frame()
if (new) {
plot(temp$jday, temp[, var], xlab = xlab, ylab = ylab,
type = 'l', col = color, ...)
} else {
points(temp$jday, temp[, var], type = 'l', col = color, ...)
}
}
# Get frass data and then get julian days and times
data = frassData(open = T) %>%
filter(!is.na(Time.Set) & !is.na(Time.Collected)) %>%
mutate(Date.Set = as.Date(Date.Set, format = "%m/%d/%Y"),
Time.Set = as.character(Time.Set),
Time.Collected = as.character(Time.Collected),
Date.Collected = as.Date(Date.Collected, format = "%m/%d/%Y"),
Year = format(Date.Collected, "%Y"),
jday.Set = julianDayTime(Date.Set, Time.Set),
jday.Collected = julianDayTime(Date.Collected, Time.Collected),
frass.mg.d = Frass.mass..mg./(jday.Collected - jday.Set),
frass.no.d = Frass.number/(jday.Collected - jday.Set),
jday = (floor(jday.Collected) + floor(jday.Set))/2)
# Sampling event data that specify reliability of data on any given date
# (due to storms, etc that may affect frass recovery)
url = "https://docs.google.com/spreadsheets/d/1RwXzwhHUbP0m5gKSOVhnKZbS1C_NrbdfHLglIVCzyFc/edit#gid=1611171427"
events = gsheet2tbl(url)
events$date = as.Date(events$date, format = "%m/%d/%Y")
meanfrass = data %>%
filter(!is.na(Frass.mass..mg.)) %>%
mutate(site = ifelse(Site=="Botanical Garden", 8892356, 117)) %>%
group_by(site, Date.Collected, Year, jday) %>%
summarize(mass = mean(frass.mg.d, na.rm=T),
density = mean(frass.no.d, na.rm=T)) %>%
left_join(events[, c('date', 'site', 'reliability')], by = c('Date.Collected' = 'date',
'site' = 'site')) %>%
rename(date = Date.Collected)
write.csv(meanfrass, "data/arthropods/frass_by_day_2015-2017.csv", row.names = F)
beatvis.pr = rbind(beatsheet.pr, amsurvey.pr)
beatvis.bg = rbind(beatsheet.bg, amsurvey.bg)
# Frass plotting
par(mfcol = c(4,2), mar = c(4,4,1,1), mgp = c(2.25, .75, 0))
## Frass Mass
# Bot Garden
frassplot(meanfrass, inputSite = 8892356, 2015, 'red', new = T, var = 'mass', xlim = c(138,205),
ylim = c(0, 4), lwd = 2, minReliability = 1, lty = 'dotted', main = 'NCBG, 2015')
frassplot(meanfrass, inputSite = 8892356, 2015, 'red', new = F, var = 'mass',
lwd = 3, minReliability = 2, lty = 'dashed')
frassplot(meanfrass, inputSite = 8892356, 2015, 'red', new = F, var = 'mass',
lwd = 4, minReliability = 3, lty = 'solid')
par(new = T)
bglep15.mass = meanDensityByDay(beatvis.bg, ordersToInclude = "LEPL", inputYear = 2015,
inputSite = 8892356, jdRange = c(138,205), outlierCount = 30,
plot = T, new = T, plotVar = 'meanBiomass',  xlim = c(138,205),
lwd = 4, col = 'blueviolet', yaxt = 'n', ylab = '')
legend("topleft", c('frass', 'LEPL mass'), lwd = 4, col = c('red', 'blueviolet'))
frassplot(meanfrass, inputSite = 8892356, 2016, 'red', new = T, var = 'mass', xlim = c(138,205),
ylim = c(0, 4), lwd = 2, minReliability = 1, lty = 'dotted', main = 'NCBG, 2016')
frassplot(meanfrass, inputSite = 8892356, 2016, 'red', new = F, var = 'mass',
lwd = 3, minReliability = 2, lty = 'dashed')
frassplot(meanfrass, inputSite = 8892356, 2016, 'red', new = F, var = 'mass',
lwd = 4, minReliability = 3, lty = 'solid')
par(new = T)
bglep16.mass = meanDensityByDay(beatvis.bg, ordersToInclude = "LEPL", inputYear = 2016,
inputSite = 8892356, jdRange = c(138,205), outlierCount = 30,
plot = T, new = T, plotVar = 'meanBiomass', xlim = c(138, 205),
lwd = 4, col = 'blueviolet', yaxt = 'n', ylab = '')
frassplot(meanfrass, inputSite = 8892356, 2017, 'red', new = T, var = 'mass', xlim = c(138,205),
ylim = c(0, 12), lwd = 2, minReliability = 1, lty = 'dotted', main = 'NCBG, 2017')
frassplot(meanfrass, inputSite = 8892356, 2017, 'red', new = F, var = 'mass',
lwd = 3, minReliability = 2, lty = 'dashed')
frassplot(meanfrass, inputSite = 8892356, 2017, 'red', new = F, var = 'mass',
lwd = 4, minReliability = 3, lty = 'solid')
par(new = T)
bglep17.mass = meanDensityByDay(beatvis.bg, ordersToInclude = "LEPL", inputYear = 2017,
inputSite = 8892356, jdRange = c(138,205), outlierCount = 30,
plot = T, new = T, plotVar = 'meanBiomass', xlim = c(138, 205),
lwd = 4, col = 'blueviolet', yaxt = 'n', ylab = '')
#plot compiling Bot Garden frass from 2015 through 2018
frassplot(meanfrass, inputSite = 8892356, 2015, 'red', new = T, var = 'mass', xlim = c(138,205),
ylim = c(0, 10.14), lwd = 2, minReliability = 2, xlab = "Julian Day", ylab = "Frass (mg./day)", lty = 'solid', main = 'NCBG Frass')
frassplot(meanfrass, inputSite = 8892356, 2016, 'green', new = F, var = 'mass', xlim = c(138,205),
ylim = c(0, 10.14), lwd = 2, minReliability = 2, lty = 'twodash', main = 'NCBG Frass')
frassplot(meanfrass, inputSite = 8892356, 2017, 'orange', new = F, var = 'mass', xlim = c(138,205),
ylim = c(0, 10.14), lwd = 2, minReliability = 2, lty = 'dotted', main = 'NCBG Frass')
frassplot(meanfrass, inputSite = 8892356, 2018, 'blue', new = F, var = 'mass', xlim = c(138,205),
ylim = c(0, 10.14), lwd = 2, minReliability = 2, lty = 'dashed', main = 'NCBG Frass')
#legend to decode graphic
legend(136, 10.2, title = "Survey Year", c("2015", "2016", "2017", "2018"), cex = .7, bty = "y", y.intersp = .8,
lty=c("solid", "twodash", "dotted", "dashed"), col=c("red", "green", "orange", "blue"))
#plot compiling Bot Garden frass from 2015 through 2018
frassplot(meanfrass, inputSite = 8892356, 2015, 'red', new = T, var = 'mass', xlim = c(138,205),
ylim = c(0, 10.14), lwd = 2, minReliability = 2, xlab = "Julian Day", ylab = "Frass (mg./day)", lty = 'solid', main = 'NCBG Frass')
frassplot(meanfrass, inputSite = 8892356, 2016, 'green', new = F, var = 'mass', xlim = c(138,205),
ylim = c(0, 10.14), lwd = 2, minReliability = 2, lty = 'twodash', main = 'NCBG Frass')
frassplot(meanfrass, inputSite = 8892356, 2017, 'orange', new = F, var = 'mass', xlim = c(138,205),
ylim = c(0, 10.14), lwd = 2, minReliability = 2, lty = 'dotted', main = 'NCBG Frass')
frassplot(meanfrass, inputSite = 8892356, 2018, 'blue', new = F, var = 'mass', xlim = c(138,205),
ylim = c(0, 10.14), lwd = 2, minReliability = 2, lty = 'dashed', main = 'NCBG Frass')
#legend to decode graphic
legend(136, 10.2, title = "Survey Year", c("2015", "2016", "2017", "2018"), cex = .7, bty = "y", y.intersp = .8,
lty=c("solid", "twodash", "dotted", "dashed"), col=c("red", "green", "orange", "blue"))
#plot compiling Prairie Ridge frass from 2015 through 2018. Not showing 2016 & 2017 data due to an error - needs trouble shooting.
frassplot(meanfrass, inputSite = 117, 2015, 'red', new = T, var = 'mass', xlim = c(138,205),
ylim = c(0, 11.5), lwd = 2, minReliability = 2, xlab = "Julian Day", ylab = "Frass (mg./day)", lty = 'solid', main = 'Prairie Ridge Frass')
frassplot(meanfrass, inputSite = 117, 2016, 'green', new = F, var = 'mass', xlim = c(138,205),
ylim = c(0, 11.5), lwd = 2, minReliability = 2, lty = 'twodash', main = 'Prairie Ridge Frass')
frassplot(meanfrass, inputSite = 117, 2017, 'orange', new = F, var = 'mass', xlim = c(138,205),
ylim = c(0, 11.5), lwd = 2, minReliability = 2, lty = 'dotted', main = 'Prairie Ridge Frass')
frassplot(meanfrass, inputSite = 117, 2018, 'blue', new = F, var = 'mass', xlim = c(138,205),
ylim = c(0, 11.5), lwd = 2, minReliability = 2, lty = 'dashed', main = 'Prairie Ridge Frass')
#legend to decode graphic
legend(137, 11.6, title = "Survey Year", c("2015", "2016", "2017", "2018"), cex = .7, bty = "y", y.intersp = .8,
lty=c("solid", "twodash", "dotted", "dashed"), col=c("red", "green", "orange", "blue"))
#plot compiling Prairie Ridge and Bot Garden frass from 2015 & 2018  .Not showing 2016 & 2017 data due to an error - needs trouble shooting.
frassplot(meanfrass, inputSite = 8892356, 2015, 'violet', new = T, var = 'mass', xlim = c(138,205),
ylim = c(0, 11.5), lwd = 2, minReliability = 2, xlab = "Julian Day", ylab = "Frass (mg./day)", lty = 'solid', main = 'Prairie Ridge vs. Botanical Garden Frass')
frassplot(meanfrass, inputSite = 8892356, 2018, 'blue', new = F, var = 'mass', xlim = c(138,205),
ylim = c(0, 11.5), lwd = 2, minReliability = 2, lty = 'dashed', main = '')
frassplot(meanfrass, inputSite = 117, 2015, 'green', new = F, var = 'mass', xlim = c(138,205),
ylim = c(0, 11.5), lwd = 2, minReliability = 2, xlab = "Julian Day", ylab = "Frass (mg./day)", lty = 'twodash', main = '')
frassplot(meanfrass, inputSite = 117, 2018, 'orange', new = F, var = 'mass', xlim = c(138,205),
ylim = c(0, 11.5), lwd = 2, minReliability = 2, lty = 'dotted', main = '')
#legend to decode graphic
legend("topleft", cex = .53, title = "Survey Site & Year", c("BG 2015", "BG 2018", "PR 2015", "PR 2018"), lwd = 2, bty = "y",
lty=c("solid", "dashed", "twodash", "dotted"), col=c("violet", "blue", "green", "orange"))
#plot compiling Bot Garden frass from 2015 through 2018
frassplot(meanfrass, inputSite = 8892356, 2015, 'red', new = T, var = 'mass', xlim = c(138,205),
ylim = c(0, 10.14), lwd = 2, minReliability = 2, xlab = "Julian Day", ylab = "Frass (mg./day)", lty = 'solid', main = 'NCBG Frass')
frassplot(meanfrass, inputSite = 8892356, 2016, 'green', new = F, var = 'mass', xlim = c(138,205),
ylim = c(0, 10.14), lwd = 2, minReliability = 2, lty = 'twodash', main = 'NCBG Frass')
frassplot(meanfrass, inputSite = 8892356, 2017, 'orange', new = F, var = 'mass', xlim = c(138,205),
ylim = c(0, 10.14), lwd = 2, minReliability = 2, lty = 'dotted', main = 'NCBG Frass')
frassplot(meanfrass, inputSite = 8892356, 2018, 'blue', new = F, var = 'mass', xlim = c(138,205),
ylim = c(0, 10.14), lwd = 2, minReliability = 2, lty = 'dashed', main = 'NCBG Frass')
#legend to decode graphic
legend(136, 10.2, title = "Survey Year", c("2015", "2016", "2017", "2018"), cex = .7, bty = "y", y.intersp = .8,
lty=c("solid", "twodash", "dotted", "dashed"), col=c("red", "green", "orange", "blue"), lwd = 2)
#plot compiling Bot Garden frass from 2015 through 2018
frassplot(meanfrass, inputSite = 8892356, 2015, 'red', new = T, var = 'mass', xlim = c(138,205),
ylim = c(0, 10.14), lwd = 2, minReliability = 2, xlab = "Julian Day", ylab = "Frass (mg./day)", lty = 'solid', main = 'NCBG Frass')
frassplot(meanfrass, inputSite = 8892356, 2016, 'green', new = F, var = 'mass', xlim = c(138,205),
ylim = c(0, 10.14), lwd = 2, minReliability = 2, lty = 'twodash', main = 'NCBG Frass')
frassplot(meanfrass, inputSite = 8892356, 2017, 'orange', new = F, var = 'mass', xlim = c(138,205),
ylim = c(0, 10.14), lwd = 2, minReliability = 2, lty = 'dotted', main = 'NCBG Frass')
frassplot(meanfrass, inputSite = 8892356, 2018, 'blue', new = F, var = 'mass', xlim = c(138,205),
ylim = c(0, 10.14), lwd = 2, minReliability = 2, lty = 'dashed', main = 'NCBG Frass')
#legend to decode graphic
legend(136, 10.2, title = "Survey Year", c("2015", "2016", "2017", "2018"), cex = .7, bty = "n", y.intersp = .8,
lty=c("solid", "twodash", "dotted", "dashed"), col=c("red", "green", "orange", "blue"), lwd = 2)
#plot compiling Prairie Ridge frass from 2015 through 2018. Not showing 2016 & 2017 data due to an error - needs trouble shooting.
frassplot(meanfrass, inputSite = 117, 2015, 'red', new = T, var = 'mass', xlim = c(138,205),
ylim = c(0, 11.5), lwd = 2, minReliability = 2, xlab = "Julian Day", ylab = "Frass (mg./day)", lty = 'solid', main = 'Prairie Ridge Frass')
frassplot(meanfrass, inputSite = 117, 2016, 'green', new = F, var = 'mass', xlim = c(138,205),
ylim = c(0, 11.5), lwd = 2, minReliability = 2, lty = 'twodash', main = 'Prairie Ridge Frass')
frassplot(meanfrass, inputSite = 117, 2017, 'orange', new = F, var = 'mass', xlim = c(138,205),
ylim = c(0, 11.5), lwd = 2, minReliability = 2, lty = 'dotted', main = 'Prairie Ridge Frass')
frassplot(meanfrass, inputSite = 117, 2018, 'blue', new = F, var = 'mass', xlim = c(138,205),
ylim = c(0, 11.5), lwd = 2, minReliability = 2, lty = 'dashed', main = 'Prairie Ridge Frass')
#legend to decode graphic
legend(137, 11.6, title = "Survey Year", c("2015", "2016", "2017", "2018"), cex = .7, bty = "y", y.intersp = .8,
lty=c("solid", "twodash", "dotted", "dashed"), col=c("red", "green", "orange", "blue"))
lwd = 4, col = 'blueviolet', yaxt = 'n', ylab = '')
#plot compiling Prairie Ridge frass from 2015 through 2018. Not showing 2016 & 2017 data due to an error - needs trouble shooting.
frassplot(meanfrass, inputSite = 117, 2015, 'red', new = T, var = 'mass', xlim = c(138,205),
ylim = c(0, 50), lwd = 2, minReliability = 2, xlab = "Julian Day", ylab = "Frass (mg./day)", lty = 'solid', main = 'Prairie Ridge Frass')
frassplot(meanfrass, inputSite = 117, 2016, 'green', new = F, var = 'mass', xlim = c(138,205),
ylim = c(0, 50), lwd = 2, minReliability = 2, lty = 'twodash', main = 'Prairie Ridge Frass')
frassplot(meanfrass, inputSite = 117, 2017, 'orange', new = F, var = 'mass', xlim = c(138,205),
ylim = c(0, 50), lwd = 2, minReliability = 2, lty = 'dotted', main = 'Prairie Ridge Frass')
frassplot(meanfrass, inputSite = 117, 2018, 'blue', new = F, var = 'mass', xlim = c(138,205),
ylim = c(0, 50), lwd = 2, minReliability = 2, lty = 'dashed', main = 'Prairie Ridge Frass')
#legend to decode graphic
legend(137, 11.6, title = "Survey Year", c("2015", "2016", "2017", "2018"), cex = .7, bty = "y", y.intersp = .8,
lty=c("solid", "twodash", "dotted", "dashed"), col=c("red", "green", "orange", "blue"))
#plot compiling Prairie Ridge frass from 2015 through 2018. Not showing 2016 & 2017 data due to an error - needs trouble shooting.
frassplot(meanfrass, inputSite = 117, 2015, 'red', new = T, var = 'mass', xlim = c(138,205),
ylim = c(0, 50), lwd = 2, minReliability = 2, xlab = "Julian Day", ylab = "Frass (mg./day)", lty = 'solid', main = 'Prairie Ridge Frass')
frassplot(meanfrass, inputSite = 117, 2016, 'green', new = F, var = 'mass', xlim = c(138,205),
ylim = c(0, 50), lwd = 2, minReliability = 2, lty = 'twodash', main = 'Prairie Ridge Frass')
frassplot(meanfrass, inputSite = 117, 2017, 'orange', new = F, var = 'mass', xlim = c(138,205),
ylim = c(0, 50), lwd = 2, minReliability = 2, lty = 'dotted', main = 'Prairie Ridge Frass')
frassplot(meanfrass, inputSite = 117, 2018, 'blue', new = F, var = 'mass', xlim = c(138,205),
ylim = c(0, 50), lwd = 2, minReliability = 2, lty = 'dashed', main = 'Prairie Ridge Frass')
#legend to decode graphic
legend(137, 11.6, title = "Survey Year", c("2015", "2016", "2017", "2018"), cex = .7, bty = "y", y.intersp = .8,
lty=c("solid", "twodash", "dotted", "dashed"), col=c("red", "green", "orange", "blue"))
View(data)
View(events)
View(events[events$site == 117,])
#plot compiling Prairie Ridge and Bot Garden frass from 2015 & 2018  .Not showing 2016 & 2017 data due to an error - needs trouble shooting.
frassplot(meanfrass, inputSite = 8892356, 2015, 'violet', new = T, var = 'mass', xlim = c(138,205),
ylim = c(0, 11.5), lwd = 2, minReliability = 2, xlab = "Julian Day", ylab = "Frass (mg./day)", lty = 'solid', main = 'Prairie Ridge vs. Botanical Garden Frass')
frassplot(meanfrass, inputSite = 8892356, 2018, 'blue', new = F, var = 'mass', xlim = c(138,205),
ylim = c(0, 11.5), lwd = 2, minReliability = 2, lty = 'dashed', main = '')
frassplot(meanfrass, inputSite = 117, 2015, 'green', new = F, var = 'mass', xlim = c(138,205),
ylim = c(0, 11.5), lwd = 2, minReliability = 2, xlab = "Julian Day", ylab = "Frass (mg./day)", lty = 'twodash', main = '')
frassplot(meanfrass, inputSite = 117, 2018, 'orange', new = F, var = 'mass', xlim = c(138,205),
ylim = c(0, 11.5), lwd = 2, minReliability = 2, lty = 'dotted', main = '')
#legend to decode graphic
legend("topleft", cex = .53, title = "Survey Site & Year", c("BG 2015", "BG 2018", "PR 2015", "PR 2018"), lwd = 2, bty = "y",
lty=c("solid", "dashed", "twodash", "dotted"), col=c("violet", "blue", "green", "orange"))
frassplot(meanfrass, inputSite = 8892356, 2015, 'violet', new = T, var = 'mass', xlim = c(138,205),
ylim = c(0, 11.5), lwd = 2, minReliability = 2, xlab = "Julian Day", ylab = "Frass (mg./day)", lty = 'solid', main = 'Prairie Ridge vs. Botanical Garden Frass')
frassplot(meanfrass, inputSite = 8892356, 2018, 'blue', new = F, var = 'mass', xlim = c(138,205),
ylim = c(0, 11.5), lwd = 2, minReliability = 2, lty = 'dashed', main = '')
frassplot(meanfrass, inputSite = 117, 2015, 'green', new = F, var = 'mass', xlim = c(138,205),
ylim = c(0, 11.5), lwd = 2, minReliability = 2, xlab = "Julian Day", ylab = "Frass (mg./day)", lty = 'twodash', main = '')
frassplot(meanfrass, inputSite = 117, 2018, 'orange', new = F, var = 'mass', xlim = c(138,205),
ylim = c(0, 11.5), lwd = 2, minReliability = 2, lty = 'dotted', main = '')
#legend to decode graphic
legend("topleft", cex = .54, title = "Survey Site & Year", c("BG 2015", "BG 2018", "PR 2015", "PR 2018"), lwd = 2, bty = "n",
lty=c("solid", "dashed", "twodash", "dotted"), col=c("violet", "blue", "green", "orange"))
#plot compiling Prairie Ridge and Bot Garden frass from 2015 & 2018  .Not showing 2016 & 2017 data due to an error - needs trouble shooting.
frassplot(meanfrass, inputSite = 8892356, 2015, 'violet', new = T, var = 'mass', xlim = c(138,205),
ylim = c(0, 11.5), lwd = 2, minReliability = 2, xlab = "Julian Day", ylab = "Frass (mg./day)", lty = 'solid', main = 'Prairie Ridge vs. Botanical Garden Frass')
frassplot(meanfrass, inputSite = 8892356, 2018, 'blue', new = F, var = 'mass', xlim = c(138,205),
ylim = c(0, 11.5), lwd = 2, minReliability = 2, lty = 'dashed', main = '')
frassplot(meanfrass, inputSite = 117, 2015, 'green', new = F, var = 'mass', xlim = c(138,205),
ylim = c(0, 11.5), lwd = 2, minReliability = 2, xlab = "Julian Day", ylab = "Frass (mg./day)", lty = 'twodash', main = '')
frassplot(meanfrass, inputSite = 117, 2018, 'orange', new = F, var = 'mass', xlim = c(138,205),
ylim = c(0, 11.5), lwd = 2, minReliability = 2, lty = 'dotted', main = '')
#legend to decode graphic
legend("topleft", cex = .56, title = "Survey Site & Year", c("BG 2015", "BG 2018", "PR 2015", "PR 2018"), lwd = 2, bty = "n",
lty=c("solid", "dashed", "twodash", "dotted"), col=c("violet", "blue", "green", "orange"))
#plot compiling Prairie Ridge and Bot Garden frass from 2015 & 2018  .Not showing 2016 & 2017 data due to an error - needs trouble shooting.
frassplot(meanfrass, inputSite = 8892356, 2015, 'violet', new = T, var = 'mass', xlim = c(138,205),
ylim = c(0, 11.5), lwd = 2, minReliability = 2, xlab = "Julian Day", ylab = "Frass (mg./day)", lty = 'solid', main = 'Prairie Ridge vs. Botanical Garden Frass')
frassplot(meanfrass, inputSite = 8892356, 2018, 'blue', new = F, var = 'mass', xlim = c(138,205),
ylim = c(0, 11.5), lwd = 2, minReliability = 2, lty = 'dashed', main = '')
frassplot(meanfrass, inputSite = 117, 2015, 'green', new = F, var = 'mass', xlim = c(138,205),
ylim = c(0, 11.5), lwd = 2, minReliability = 2, xlab = "Julian Day", ylab = "Frass (mg./day)", lty = 'twodash', main = '')
frassplot(meanfrass, inputSite = 117, 2018, 'orange', new = F, var = 'mass', xlim = c(138,205),
ylim = c(0, 11.5), lwd = 2, minReliability = 2, lty = 'dotted', main = '')
#legend to decode graphic
legend("topleft", cex = .58, title = "Survey Site & Year", c("BG 2015", "BG 2018", "PR 2015", "PR 2018"), lwd = 2, bty = "n",
lty=c("solid", "dashed", "twodash", "dotted"), col=c("violet", "blue", "green", "orange"))
# Script for analyzing milk jug frass data
frassLoad = function(open = T, write = F) {
require(gsheet)
url = "https://docs.google.com/spreadsheets/d/1RwXzwhHUbP0m5gKSOVhnKZbS1C_NrbdfHLglIVCzyFc/edit#gid=806965256"
data = gsheet2tbl(url)
if (write) {
# Write a copy
write.csv(data, paste('data/frass_', Sys.Date(), '.csv', sep = ''),
row.names = F)
}
if (open) { return (data) }
}
# Script for analyzing filter paper data
library(gsheet)
library(dplyr)
library(tidyr)
frassData = function(open = F, write = F) {
require(gsheet)
url = "https://docs.google.com/spreadsheets/d/1RwXzwhHUbP0m5gKSOVhnKZbS1C_NrbdfHLglIVCzyFc/edit#gid=1479231778"
data = gsheet2tbl(url)
if (write) {
# Write a copy
write.csv(data, paste('data/frass_', Sys.Date(), '.csv', sep = ''),
row.names = F)
}
if (open) { return (data) }
}
# Function that takes a date field (formatted as %m/%d/%Y) and a time field
# (hh:mm in 24h time), converts the date to julian day and adds the fractional
# day represented by the hours and minutes
julianDayTime = function(date, hour_min) {
require(lubridate)
jday = yday(date)
temp = sapply(strsplit(hour_min, ":"), function(x) {
x = as.numeric(x)
x[1] + x[2]/60
})
output = jday + temp/24
return(output)
}
NCBG_PR_frassdata = frassData(open = T)
frassData = function(open = F, write = F) {
require(gsheet)
url = "https://docs.google.com/spreadsheets/d/1RwXzwhHUbP0m5gKSOVhnKZbS1C_NrbdfHLglIVCzyFc/edit#gid=1479231778"
data = gsheet2tbl(url)
if (write) {
# Write a copy
write.csv(data, paste('data/frass_', Sys.Date(), '.csv', sep = ''),
row.names = F)
}
if (open) { return (data) }
}
# Function that takes a date field (formatted as %m/%d/%Y) and a time field
# (hh:mm in 24h time), converts the date to julian day and adds the fractional
# day represented by the hours and minutes
julianDayTime = function(date, hour_min) {
require(lubridate)
jday = yday(date)
temp = sapply(strsplit(hour_min, ":"), function(x) {
x = as.numeric(x)
x[1] + x[2]/60
})
output = jday + temp/24
return(output)
}
NCBG_PR_frassdata = frassData(open = T)
#removing outliers in frassLoad
data = frassLoad(open = T)
dataWO = data[data$Weight_Raw < 50,]
data_rawpcsWO = data[data$Pieces_Raw < 60,]
data_srtdpcsWO = data[data$Pieces_Sorted < 50,]
data_img_exlc_outlier = data[data$Img_Sorted < 20, ]
# Linear model & plot describing weight_sorted vs weight_raw
raw_sort = lm(Weight_Sorted ~ Weight_Raw, data = data)
raw_sort_outlier_excl = lm(Weight_Sorted ~ Weight_Raw, data = dataWO)
sort_img = lm(Img_Sorted ~ Weight_Sorted, data = dataWO)
plot(data$Weight_Raw, data$Weight_Sorted, main = "Frass Weight Comparison (mg.)", xlab = "Weight Raw", ylab = "Weight Sorted", pch = 17, cex = 1, col = 'red')
plot(data$Weight_Raw[data$Weight_Raw<50], data$Weight_Sorted[data$Weight_Raw<50],main = "Frass Weight Comparison (mg.)", xlab = "Weight Raw", ylab = "Weight Sorted", pch = 17, cex = 1, col = 'red')
abline(raw_sort_outlier_excl)
## Linear models & plots showing raw/sorted img against raw/sorted pcs to describe how much sorting changes % of area
# Raw
plot(data$Pieces_Sorted[data$Pieces_Raw<60], data$Img_Raw[data$Pieces_Raw<60], main = "Raw Frass Comparison: # of Pieces vs. % of Area",
xlab = "Total Pieces", ylab = "% of Area (unsorted)", pch = 20, cex = 1, col = 'orange')
raw_pcs = lm(Img_Raw ~ Pieces_Sorted, data = data)
raw_pcs_outlier_excl = lm(Img_Raw ~ Pieces_Raw, data = data_rawpcsWO)
abline(raw_pcs_outlier_excl)
summary(raw_pcs_outlier_excl)
# Sorted
plot(data$Pieces_Sorted[data$Pieces_Sorted<50], data$Img_Sorted[data$Pieces_Sorted<50], main = "Sorted Frass Comparison: # of Pieces vs. % of Area",
xlab = "Pieces Sorted", ylab = "% of Area", pch = 20, cex = 1, col = 'blue')
sort_pcs_outlier_excl = lm(Img_Sorted ~ Pieces_Sorted, data = data_srtdpcsWO)
abline(sort_pcs_outlier_excl)
summary(sort_pcs_outlier_excl)
plot(data$Pieces_Sorted[data$Pieces_Sorted<50], data$Img_Sorted[data$Pieces_Sorted<50], main = "Sorted Frass Comparison: # of Pieces vs. % of Area",
xlab = "Pieces Sorted", ylab = "% of Area", pch = 20, cex = 1, col = 'blue')
sort_pcs_outlier_excl = lm(Img_Sorted ~ Pieces_Sorted, data = data_srtdpcsWO)
abline(sort_pcs_outlier_excl)
summary(sort_pcs_outlier_excl)
# Raw image versus weight sorted
# Excluded outlier
plot(dataWO$Img_Raw, dataWO$Weight_Sorted, main = "Raw Image v. Weight of sorted Frass", xlab = "Raw Image Percent Coverage",
ylab = "Weight Sorted (mg)", col = 'orange' , pch = 18)
raw_img = lm(dataWO$Weight_Sorted ~ dataWO$Img_Raw, data = dataWO)
abline(raw_img)
summary(raw_img)
# Img_raw vs.Img_sort
plot(data$Img_Raw[data$Img_Sorted<20], data$Img_Sorted[data$Img_Sorted<20], main = "Comparison Img_Raw vs. Img_Sorted (% of area estimate)", xlab = "Raw Img.", ylab ="Sorted Img.", col = 'violet', pch = 20)
rawsort_img = lm(data$Img_Sorted ~ data$Img_Raw, data = data)
abline(rawsort_img)
rawsort_img_sum = summary(rawsort_img)
r2 = rawsort_img_sum$adj.r.squared
rawsort_img_pval = rawsort_img_sum$coefficients[2,4]
mylabel = bquote(italic(R)^2 == .(format(r2, digits = 3)))
text(x = 11.5, y = 16, labels = mylabel)
#NCBG Comparison: Filter paper vs. Milk jug collection. Traps set on 3rd.
#Filter paper collected on the 6th & 10th
#milk jug collected on 10th
#must sum filter paper frass per circle to make accurate comparison
filterpaper = NCBG_PR_frassdata[c(1154:1169,1182:1197),]
raw_pcs_outlier_excl
raw_pcs
plot(data$Pieces_Sorted[data$Pieces_Raw<60], data$Img_Raw[data$Pieces_Raw<60], main = "Raw Frass Comparison: # of Pieces vs. % of Area",
xlab = "Total Pieces", ylab = "% of Area (unsorted)", pch = 20, cex = 1, col = 'orange')
abline(raw_pcs)
abline(raw_pcs_outlier_excl)
plot(data$Pieces_Sorted[data$Pieces_Raw<60], data$Img_Raw[data$Pieces_Raw<60], main = "Raw Frass Comparison: # of Pieces vs. % of Area",
xlab = "Total Pieces", ylab = "% of Area (unsorted)", pch = 20, cex = 1, col = 'orange')
raw_pcs = lm(Img_Raw ~ Pieces_Sorted, data = data)
raw_pcs_outlier_excl = lm(Img_Raw ~ Pieces_Raw, data = data_rawpcsWO)
abline(raw_pcs_outlier_excl)
summary(raw_pcs_outlier_excl)
plot(data$Pieces_Sorted[data$Pieces_Raw<60], data$Img_Raw[data$Pieces_Raw<60], main = "Raw Frass Comparison: # of Pieces vs. % of Area",
xlab = "Total Pieces", ylab = "% of Area (unsorted)", pch = 20, cex = 1, col = 'orange')
# Raw
plot(data$Pieces_Sorted[data$Pieces_Raw<60], data$Img_Raw[data$Pieces_Raw<60], main = "Raw Frass Comparison: # of Pieces vs. % of Area",
xlab = "Total Pieces", ylab = "% of Area (unsorted)", pch = 20, cex = 1, col = 'orange')
raw_pcs = lm(Img_Raw ~ Pieces_Sorted, data = data)
raw_pcs_outlier_excl = lm(Img_Raw ~ Pieces_Raw, data = data_rawpcsWO)
abline(raw_pcs_outlier_excl)
plot(data_rawpcsWO$Pieces_Sorted, data_rawpcsWO$Img_Raw, main = "Raw Frass Comparison: # of Pieces vs. % of Area",
xlab = "Total Pieces", ylab = "% of Area (unsorted)", pch = 20, cex = 1, col = 'orange')
plot(data_rawpcsWO$Pieces_Raw, data_rawpcsWO$Img_Raw, main = "Raw Frass Comparison: # of Pieces vs. % of Area",
xlab = "Total Pieces", ylab = "% of Area (unsorted)", pch = 20, cex = 1, col = 'orange')
raw_pcs_outlier_excl = lm(Img_Raw ~ Pieces_Raw, data = data_rawpcsWO)
abline(raw_pcs_outlier_excl)
plot(data$Pieces_Sorted[data$Pieces_Raw<60], data$Img_Raw[data$Pieces_Raw<60], main = "Raw Frass Comparison: # of Pieces vs. % of Area",
xlab = "Total Pieces", ylab = "% of Area (unsorted)", pch = 20, cex = 1, col = 'orange')
raw_pcs = lm(Img_Raw ~ Pieces_Sorted, data = data)
abline(raw_pcs)
raw_pcs_outlier_excl = lm(Img_Raw ~ Pieces_Raw, data = data_rawpcsWO)
abline(raw_pcs_outlier_excl)
raw_pcs_outlier_excl = lm(Img_Raw ~ Pieces_Sorted, data = data_rawpcsWO)
plot(data$Pieces_Sorted[data$Pieces_Raw<60], data$Img_Raw[data$Pieces_Raw<60], main = "Raw Frass Comparison: # of Pieces vs. % of Area",
xlab = "Total Pieces", ylab = "% of Area (unsorted)", pch = 20, cex = 1, col = 'orange')
raw_pcs_outlier_excl = lm(Img_Raw ~ Pieces_Sorted, data = data_rawpcsWO)
abline(raw_pcs_outlier_excl)
plot(data$Img_Raw[data$Img_Sorted<20], data$Img_Sorted[data$Img_Sorted<20], main = "Comparison Img_Raw vs. Img_Sorted (% of area estimate)", xlab = "Raw Img.", ylab ="Sorted Img.", col = 'violet', pch = 20)
rawsort_img = lm(data$Img_Sorted ~ data$Img_Raw, data = data)
abline(rawsort_img)
rawsort_img_sum = summary(rawsort_img)
r2 = rawsort_img_sum$adj.r.squared
rawsort_img_pval = rawsort_img_sum$coefficients[2,4]
mylabel = bquote(italic(R)^2 == .(format(r2, digits = 3)))
text(x = 11.5, y = 16, labels = mylabel)
filtermass = aggregate(Frass.mass..mg. ~ Survey, data = filterpaper, sum)
filterpcs = aggregate(Frass.number ~ Survey, data = filterpaper, sum)
View(filterpcs)
nrow(filterpcs)
nrow(filtermass)
t = cbind(filterpcs, filtermass)
View(t)
t = merge(filterpcs)
t = merge(filterpcs, filtermass, by = "Survey")
