filterpaper = NCBG_PR_frassdata[c(1154:1169,1182:1197),]
srtd_filterpaper = filterpaper[ ! filterpaper$Survey %in% c("1DBN","2DBS", "3DBV","4DCE","5DCI","6DCM","7DCQ","8DCV"), ]
#subset weight & pcs by unique circles, then sum (to account for additional days collected in milkjug)
filtermass = aggregate(Frass.mass..mg. ~ Survey, data = srtd_filterpaper, sum)
filterpcs = aggregate(Frass.number ~ Survey, data = srtd_filterpaper, sum)
View(filtermass)
filterpaper = NCBG_PR_frassdata[c(1154:1169,1182:1197),]
srtd_filterpaper = filterpaper[ ! filterpaper$Survey %in% c("1DBN","2DBS", "3DBV","4DCE","5DCI","6DCM","7DCQ","8DCV"), ]
#subset weight & pcs by unique circles, then sum (to account for additional days collected in milkjug)
filtermass = aggregate(Frass.mass..mg. ~ Survey, data = srtd_filterpaper, sum)
filterpcs = aggregate(Frass.number ~ Survey, data = srtd_filterpaper, sum)
filterpaper = NCBG_PR_frassdata[c(1154:1169,1182:1197),]
srtd_filterpaper = filterpaper[ ! filterpaper$Survey %in% c("1DBN","2DBS", "3DBV","4DCE","5DCI","6DCM","7DCQ","8DCV"), ]
#Sum values of same filter paper frass traps (to account for the additional collection days)
filtermass = aggregate(Frass.mass..mg. ~ Survey, data = srtd_filterpaper, sum)
filterpcs = aggregate(Frass.number ~ Survey, data = srtd_filterpaper, sum)
#plot comparing sorted pcs
milkjug_filter_frasstraps = merge(filterpcs, filtermass, by = "Survey")
View(milkjug_filter_frasstraps)
View(filtermass)
view(filterpcs)
View(filterpcs)
milkjugs = data[c(74:89),]
View(milkjugs)
# Script for analyzing milk jug frass data
frassLoad = function(open = T, write = F) {
require(gsheet)
url = "https://docs.google.com/spreadsheets/d/1RwXzwhHUbP0m5gKSOVhnKZbS1C_NrbdfHLglIVCzyFc/edit#gid=806965256"
data = gsheet2tbl(url)
if (write) {
# Write a copy
write.csv(data, paste('data/frass_', Sys.Date(), '.csv', sep = ''),
row.names = F)
}
if (open) { return (data) }
}
# Script for analyzing filter paper data
library(gsheet)
library(dplyr)
library(tidyr)
# Function for reading in frass data from GoogleDoc
# *if aim is to backup GoogleDoc and write to disk only, then open =F and write = T
# *if aim is to use data without writing to disk, then open = T and write = F
frassData = function(open = F, write = F) {
require(gsheet)
url = "https://docs.google.com/spreadsheets/d/1RwXzwhHUbP0m5gKSOVhnKZbS1C_NrbdfHLglIVCzyFc/edit#gid=1479231778"
data = gsheet2tbl(url)
if (write) {
# Write a copy
write.csv(data, paste('data/frass_', Sys.Date(), '.csv', sep = ''),
row.names = F)
}
if (open) { return (data) }
}
# Function that takes a date field (formatted as %m/%d/%Y) and a time field
# (hh:mm in 24h time), converts the date to julian day and adds the fractional
# day represented by the hours and minutes
julianDayTime = function(date, hour_min) {
require(lubridate)
jday = yday(date)
temp = sapply(strsplit(hour_min, ":"), function(x) {
x = as.numeric(x)
x[1] + x[2]/60
})
output = jday + temp/24
return(output)
}
#renaming data sets
data = frassLoad(open = T)
NCBG_PR_frassdata = frassData(open = T)
milkjugs = data[c(74:89)]
milkjugs = data[c(74:89),]
View(milkjugs)
View(frass_filter)
frass_filter = merge(filterpcs, filtermass, by = "Survey")
View(frass_filter)
milkjugs = data[c(74:89),c("Pieces_Raw", "Pieces_Sorted")]
View(milkjugs)
milkjugs = data[c(74:89),c("Survey","Pieces_Raw", "Pieces_Sorted")]
milkjugs = data[c(74:89),c("Survey","Pieces_Raw", "Pieces_Sorted")]
milkjugs = data[c(74:89),c("Survey","Pieces_Raw", "Pieces_Sorted")]
milkjugs = data[c(74:89),c("Survey","Pieces_Raw", "Pieces_Sorted")]
milkjugs = data[c(74:89),c("Survey","Pieces_Raw", "Pieces_Sorted")]
# Script for analyzing milk jug frass data
frassLoad = function(open = T, write = F) {
require(gsheet)
url = "https://docs.google.com/spreadsheets/d/1RwXzwhHUbP0m5gKSOVhnKZbS1C_NrbdfHLglIVCzyFc/edit#gid=806965256"
data = gsheet2tbl(url)
if (write) {
# Write a copy
write.csv(data, paste('data/frass_', Sys.Date(), '.csv', sep = ''),
row.names = F)
}
if (open) { return (data) }
}
# Script for analyzing filter paper data
library(gsheet)
library(dplyr)
library(tidyr)
# Function for reading in frass data from GoogleDoc
# *if aim is to backup GoogleDoc and write to disk only, then open =F and write = T
# *if aim is to use data without writing to disk, then open = T and write = F
frassData = function(open = F, write = F) {
require(gsheet)
url = "https://docs.google.com/spreadsheets/d/1RwXzwhHUbP0m5gKSOVhnKZbS1C_NrbdfHLglIVCzyFc/edit#gid=1479231778"
data = gsheet2tbl(url)
if (write) {
# Write a copy
write.csv(data, paste('data/frass_', Sys.Date(), '.csv', sep = ''),
row.names = F)
}
if (open) { return (data) }
}
# Function that takes a date field (formatted as %m/%d/%Y) and a time field
# (hh:mm in 24h time), converts the date to julian day and adds the fractional
# day represented by the hours and minutes
julianDayTime = function(date, hour_min) {
require(lubridate)
jday = yday(date)
temp = sapply(strsplit(hour_min, ":"), function(x) {
x = as.numeric(x)
x[1] + x[2]/60
})
output = jday + temp/24
return(output)
}
#renaming data sets
data = frassLoad(open = T)
NCBG_PR_frassdata = frassData(open = T)
#create new data table for milk jug isolating by frass trap site
milkjugs = data[c(74:89),c("Survey","Pieces_Raw", "Pieces_Sorted")]
View(milkjugs)
milkjugs = data[c(73:88),c("Survey","Pieces_Raw", "Pieces_Sorted")]
View(milkjugs)
milkjugs = data[c(73:88),c("Survey","Weight_Sorted", "Pieces_Sorted")]
View(milkjugs)
filterfrass_all = NCBG_PR_frassdata[c(1154:1169,1182:1197),]
srtd_filterpaper = filterfrass_all[ ! filterfrass_all$Survey %in% c("1DBN","2DBS", "3DBV","4DCE","5DCI","6DCM","7DCQ","8DCV"), ]
#Sum values of same filter paper frass traps (to account for the additional collection days)
filtermass = aggregate(Frass.mass..mg. ~ Survey, data = srtd_filterpaper, sum)
filterpcs = aggregate(Frass.number ~ Survey, data = srtd_filterpaper, sum)
#create data set for filter paper traps with pieces and mass merged
filterpaper = merge(filterpcs, filtermass, by = "Survey")
View(filterpaper)
filterfrass_all = NCBG_PR_frassdata[c(1154:1169,1182:1197,1210:1225),]
srtd_filterpaper = filterfrass_all[ ! filterfrass_all$Survey %in% c("1DBN","2DBS", "3DBV","4DCE","5DCI","6DCM","7DCQ","8DCV"), ]
#Sum values of same filter paper frass traps (to account for the additional collection days)
filtermass = aggregate(Frass.mass..mg. ~ Survey, data = srtd_filterpaper, sum)
filterpcs = aggregate(Frass.number ~ Survey, data = srtd_filterpaper, sum)
#create data set for filter paper traps with pieces and mass merged
filterpaper = merge(filterpcs, filtermass, by = "Survey")
View(filterpaper)
filterfrass_all = NCBG_PR_frassdata[c(1154:1169,1182:1197),]
#isolate by frass trap site
srtd_filterpaper = filterfrass_all[ ! filterfrass_all$Survey %in% c("1DBN","2DBS", "3DBV","4DCE","5DCI","6DCM","7DCQ","8DCV"), ]
#Sum values of same filter paper frass traps (to account for the additional collection days)
filtermass = aggregate(Frass.mass..mg. ~ Survey, data = srtd_filterpaper, sum)
filterpcs = aggregate(Frass.number ~ Survey, data = srtd_filterpaper, sum)
#create data set for summed values of filter paper traps, with pieces and mass merged
filter_sum = merge(filterpcs, filtermass, by = "Survey")
#create data set with normal values and collection dates
filterdates_nonsum = NCBG_PR_frassdata[c(1210:1225),]
#isolate by frass trap site
filter_normal = filterdates_nonsum[ ! filterdates_nonsum$Survey %in% c("1DBN","2DBS", "3DBV","4DCE","5DCI","6DCM","7DCQ","8DCV"), ]
filterpaper = merge(filter_sum, filter_normal)
#create new data table for filter paper from 7/6
filterfrass_all = NCBG_PR_frassdata[c(1154:1169,1182:1197),]
#isolate by frass trap site
srtd_filterpaper = filterfrass_all[ ! filterfrass_all$Survey %in% c("1DBN","2DBS", "3DBV","4DCE","5DCI","6DCM","7DCQ","8DCV"), ]
#Sum values of same filter paper frass traps (to account for the additional collection days)
filtermass = aggregate(Frass.mass..mg. ~ Survey, data = srtd_filterpaper, sum)
filterpcs = aggregate(Frass.number ~ Survey, data = srtd_filterpaper, sum)
#create data set for summed values of filter paper traps, with pieces and mass merged
filter_sum = merge(filterpcs, filtermass, by = "Survey")
#create data set with normal values and collection dates
filterdates_nonsum = NCBG_PR_frassdata[c(1210:1225),]
#isolate by frass trap site
filter_normal = filterdates_nonsum[ ! filterdates_nonsum$Survey %in% c("1DBN","2DBS", "3DBV","4DCE","5DCI","6DCM","7DCQ","8DCV"), ]
filterpaper = merge(filter_sum, filter_normal, by = "Survey")
View(filterpaper)
View(filter_normal)
View(filterfrass_all)
filterdates_nonsum = NCBG_PR_frassdata[c(1210:1225), c("Survey","Frass.mass..mg","Frass.number")]
#isolate by frass trap site
filter_normal = filterdates_nonsum[ ! filterdates_nonsum$Survey %in% c("1DBN","2DBS", "3DBV","4DCE","5DCI","6DCM","7DCQ","8DCV"), ]
filterdates_nonsum = NCBG_PR_frassdata[c(1210:1225), c("Survey","Frass.mass..mg.","Frass.number")]
#isolate by frass trap site
filter_normal = filterdates_nonsum[ ! filterdates_nonsum$Survey %in% c("1DBN","2DBS", "3DBV","4DCE","5DCI","6DCM","7DCQ","8DCV"), ]
View(filter_normal)
filterfrass_all = NCBG_PR_frassdata[c(1154:1169,1182:1197),]
#isolate by frass trap site
srtd_filterpaper = filterfrass_all[ ! filterfrass_all$Survey %in% c("1DBN","2DBS", "3DBV","4DCE","5DCI","6DCM","7DCQ","8DCV"), ]
#Sum values of same filter paper frass traps (to account for the additional collection days)
filtermass = aggregate(Frass.mass..mg. ~ Survey, data = srtd_filterpaper, sum)
filterpcs = aggregate(Frass.number ~ Survey, data = srtd_filterpaper, sum)
#create data set for summed values of filter paper traps, with pieces and mass merged
filter_sum = merge(filterpcs, filtermass, by = "Survey")
#create data set with normal values and collection dates
filterdates_nonsum = NCBG_PR_frassdata[c(1210:1225), c("Survey","Frass.mass..mg.","Frass.number")]
#isolate by frass trap site
filter_normal = filterdates_nonsum[ ! filterdates_nonsum$Survey %in% c("1DBN","2DBS", "3DBV","4DCE","5DCI","6DCM","7DCQ","8DCV"), ]
#combine adjusted filter paper frass data set with normal data set
filterpaper = rbind(filter_sum, filter_normal)
View(filterpaper)
View(filter_sum)
filterfrass_all = NCBG_PR_frassdata[c(1154:1169,1182:1197),]
#isolate by frass trap site
srtd_filterpaper = filterfrass_all[ ! filterfrass_all$Survey %in% c("1DBN","2DBS", "3DBV","4DCE","5DCI","6DCM","7DCQ","8DCV"), ]
#Sum values of same filter paper frass traps (to account for the additional collection days)
filtermass = aggregate(Frass.mass..mg. ~ Survey, data = srtd_filterpaper, sum)
filterpcs = aggregate(Frass.number ~ Survey, data = srtd_filterpaper, sum)
#create data set for summed values of filter paper traps, with pieces and mass merged
filter_sum = merge(filterpcs, filtermass, by = "Survey")
#create data set with normal values and collection dates
filterdates_nonsum = NCBG_PR_frassdata[c(1210:1225), c("Survey","Frass.mass..mg.","Frass.number")]
#isolate by frass trap site
filter_normal = filterdates_nonsum[ ! filterdates_nonsum$Survey %in% c("1DBN","2DBS", "3DBV","4DCE","5DCI","6DCM","7DCQ","8DCV"), ]
#combine adjusted filter paper frass data set with normal data set
filterpaper = rbind(filter_sum, filter_normal)
#create new data table for milk jug isolating by frass trap site
milkjugs = data[c(73:88),c("Survey","Weight_Sorted", "Pieces_Sorted")]
#merge both data sets to compare milk jug and filter paper mass and peices
compare.frasstraps = merge(milkjugs, filterpaper, by = "Survey")
View(compare.frasstraps)
View(milkjugs)
#create new data table for filter paper from 7/6
filterfrass_all = NCBG_PR_frassdata[c(1154:1169,1182:1197),]
#isolate by frass trap site
srtd_filterpaper = filterfrass_all[ ! filterfrass_all$Survey %in% c("1DBD","2DBS", "3DBV","4DCE","5DCI","6DCM","7DCQ","8DCV"), ]
#Sum values of same filter paper frass traps (to account for the additional collection days)
filtermass = aggregate(Frass.mass..mg. ~ Survey, data = srtd_filterpaper, sum)
filterpcs = aggregate(Frass.number ~ Survey, data = srtd_filterpaper, sum)
#create data set for summed values of filter paper traps, with pieces and mass merged
filter_sum = merge(filterpcs, filtermass, by = "Survey")
#create data set with normal values and collection dates
filterdates_nonsum = NCBG_PR_frassdata[c(1210:1225), c("Survey","Frass.mass..mg.","Frass.number")]
#isolate by frass trap site
filter_normal = filterdates_nonsum[ ! filterdates_nonsum$Survey %in% c("1DBN","2DBS", "3DBV","4DCE","5DCI","6DCM","7DCQ","8DCV"), ]
#combine adjusted filter paper frass data set with normal data set
filterpaper = rbind(filter_sum, filter_normal)
#create new data table for milk jug isolating by frass trap site
milkjugs = data[c(73:88),c("Survey","Weight_Sorted", "Pieces_Sorted")]
#merge both data sets to compare milk jug and filter paper mass and peices
compare.frasstraps = merge(milkjugs, filterpaper, by = "Survey")
View(compare.frasstraps)
#must sum filter paper frass by circle to make accurate comparison
#create new data table for filter paper from 7/6
filterfrass_all = NCBG_PR_frassdata[c(1154:1169,1182:1197),]
#isolate by frass trap site
srtd_filterpaper = filterfrass_all[ ! filterfrass_all$Survey %in% c("1DBD","2DBS", "3DBV","4DCE","5DCI","6DCM","7DCQ","8DCV"), ]
#Sum values of same filter paper frass traps (to account for the additional collection days)
filtermass = aggregate(Frass.mass..mg. ~ Survey, data = srtd_filterpaper, sum)
filterpcs = aggregate(Frass.number ~ Survey, data = srtd_filterpaper, sum)
#create data set for summed values of filter paper traps, with pieces and mass merged
filter_sum = merge(filterpcs, filtermass, by = "Survey")
#create data set with normal values and collection dates
filterdates_nonsum = NCBG_PR_frassdata[c(1210:1225), c("Survey","Date.Set", "Date.Collected","Frass.mass..mg.","Frass.number")]
#isolate by frass trap site
filter_normal = filterdates_nonsum[ ! filterdates_nonsum$Survey %in% c("1DBN","2DBS", "3DBV","4DCE","5DCI","6DCM","7DCQ","8DCV"), ]
#combine adjusted filter paper frass data set with normal data set
filterpaper = rbind(filter_sum, filter_normal)
#create new data table for milk jug isolating by frass trap site
milkjugs = data[c(73:88),c("Survey","Date.Set", "Date.Collected", "Weight_Sorted", "Pieces_Sorted")]
#merge both data sets to compare milk jug and filter paper mass and peices
compare.frasstraps = merge(milkjugs, filterpaper, by = "Survey")
filter_sum = merge(filterpcs, filtermass, by = c("Survey", "Date.Set", "Date.Collected")
filter_sum = merge(filterpcs, filtermass, by = c("Survey", "Date.Set", "Date.Collected"))
# Img_raw vs.Img_sort
plot(data$Img_Raw[data$Img_Sorted<20], data$Img_Sorted[data$Img_Sorted<20], main = "Comparison Img_Raw vs. Img_Sorted (% of area estimate)", xlab = "Raw Img.", ylab ="Sorted Img.", col = 'violet', pch = 20)
#create data set for summed values of filter paper traps, with pieces and mass merged
filter_sum = merge(filterpcs, filtermass, by = "Survey", "Date.Set", "Date.Collected")
View(filterpcs)
View(srtd_filterpaper)
filterfrass_all = NCBG_PR_frassdata[c(1154:1169,1182:1197),]
#isolate by frass trap site
srtd_filterpaper = filterfrass_all[ ! filterfrass_all$Survey %in% c("1DBD","2DBS", "3DBV","4DCE","5DCI","6DCM","7DCQ","8DCV"), ]
#Sum values of same filter paper frass traps (to account for the additional collection days)
filtermass = aggregate(Frass.mass..mg. ~ Survey, data = srtd_filterpaper, sum)
filterpcs = aggregate(Frass.number ~ Survey, data = srtd_filterpaper, sum)
#create data set for summed values of filter paper traps, with pieces and mass merged
groupcol <- c("Survey","Date.Set", "Date.Collected")
#merge(
#  aggregate(data[,c("Weight", "Reps", "EstMax")], by = data[grpvar], FUN = max),
#  aggregate(data[,c("RepxWeight", "Note")], by = data[grpvar], FUN = function(a) a[1]),
#  by = grpvar
#)
filter_sum = merge(filterpcs, filtermass, by = "groupcol")
filterfrass_all = NCBG_PR_frassdata[c(1154:1169,1182:1197),]
#isolate by frass trap site
srtd_filterpaper = filterfrass_all[ ! filterfrass_all$Survey %in% c("1DBD","2DBS", "3DBV","4DCE","5DCI","6DCM","7DCQ","8DCV"), ]
#Sum values of same filter paper frass traps (to account for the additional collection days)
filtermass = aggregate(Frass.mass..mg. ~ Survey, data = srtd_filterpaper, sum)
filterpcs = aggregate(Frass.number ~ Survey, data = srtd_filterpaper, sum)
#create data set for summed values of filter paper traps, with pieces and mass merged
groupcol <- c("Survey","Date.Set", "Date.Collected")
#merge(
#  aggregate(data[,c("Weight", "Reps", "EstMax")], by = data[grpvar], FUN = max),
#  aggregate(data[,c("RepxWeight", "Note")], by = data[grpvar], FUN = function(a) a[1]),
#  by = grpvar
#)
filter_sum = merge(filterpcs, filtermass, by = groupcol)
filterfrass_all = NCBG_PR_frassdata[c(1154:1169,1182:1197),]
#isolate by frass trap site
srtd_filterpaper = filterfrass_all[ ! filterfrass_all$Survey %in% c("1DBD","2DBS", "3DBV","4DCE","5DCI","6DCM","7DCQ","8DCV"), ]
#Sum values of same filter paper frass traps (to account for the additional collection days)
filtermass = aggregate(Frass.mass..mg. ~ Survey, data = srtd_filterpaper, sum)
filterpcs = aggregate(Frass.number ~ Survey, data = srtd_filterpaper, sum)
#create data set for summed values of filter paper traps, with pieces and mass merged
groupcol <- c("Survey","Date.Set", "Date.Collected")
filter_sum = merge(filterpcs, filtermass, by = groupcol)
#create new data table for filter paper from 7/6
filterfrass_all = NCBG_PR_frassdata[c(1154:1169,1182:1197),]
#isolate by frass trap site
srtd_filterpaper = filterfrass_all[ ! filterfrass_all$Survey %in% c("1DBD","2DBS", "3DBV","4DCE","5DCI","6DCM","7DCQ","8DCV"), ]
#Sum values of same filter paper frass traps (to account for the additional collection days)
filtermass = aggregate(Frass.mass..mg. ~ Survey, data = srtd_filterpaper, sum)
filterpcs = aggregate(Frass.number ~ Survey, data = srtd_filterpaper, sum)
#create data set for summed values of filter paper traps, with pieces and mass merged
filter_sum = merge(filterpcs, filtermass, by = Survey)
filterfrass_all = NCBG_PR_frassdata[c(1154:1169,1182:1197),]
#isolate by frass trap site
srtd_filterpaper = filterfrass_all[ ! filterfrass_all$Survey %in% c("1DBD","2DBS", "3DBV","4DCE","5DCI","6DCM","7DCQ","8DCV"), ]
#Sum values of same filter paper frass traps (to account for the additional collection days)
filtermass = aggregate(Frass.mass..mg. ~ Survey, data = srtd_filterpaper, sum)
filterpcs = aggregate(Frass.number ~ Survey, data = srtd_filterpaper, sum)
#create data set for summed values of filter paper traps, with pieces and mass merged
filter_sum = merge(filterpcs, filtermass, by = "Survey")
View(filter_sum)
View(filtermass)
View(filterpaper)
filterdates_nonsum = NCBG_PR_frassdata[c(1210:1225), c("Survey","Frass.mass..mg.","Frass.number")]
#isolate by frass trap site
filter_normal = filterdates_nonsum[ ! filterdates_nonsum$Survey %in% c("1DBN","2DBS", "3DBV","4DCE","5DCI","6DCM","7DCQ","8DCV"), ]
#combine adjusted filter paper frass data set with normal data set
filterpaper = rbind(filter_sum, filter_normal)
View(filterpaper)
#create new data table for milk jug isolating by frass trap site
milkjugs = data[c(73:88),c("Survey","Weight_Sorted", "Pieces_Sorted")]
compare.frasstraps = merge(milkjugs, filterpaper, by = "Survey")
View(compare.frasstraps)
plot(data$Pieces_Sorted, data$Weight_Sorted, main = "Comparison: Sorted Pieces vs. Sorted Weight (% of area)", xlab = "Sorted Pieces.", ylab ="Sorted Weight", col = 'orange', pch = 20)
plot(data$Pieces_Sorted[data$Pieces_Sorted<50], data$Weight_Sorted[data$Pieces_Sorted<50], main = "Comparison: Sorted Pieces vs. Sorted Weight (% of area)", xlab = "Sorted Pieces.", ylab ="Sorted Weight", col = 'orange', pch = 20)
sorted_lm = lm(data$Weight_Sorted ~ data$Pieces_Sorted, data = data)
abline(sorted_lm)
sorted_lm_sum = summary(sorted_lm)
sorted_lm_r2 = sorted_lm_sum$adj.r.squared
mylabel = bquote(italic(R)^2 == .(format(img_rawsrt_r2, digits = 3)))
text(x = 2, y = 16, labels = mylabel)
plot(data$Pieces_Sorted[data$Pieces_Sorted<100], data$Weight_Sorted[data$Pieces_Sorted<100], main = "Comparison: Sorted Pieces vs. Sorted Weight (% of area)", xlab = "Sorted Pieces.", ylab ="Sorted Weight", col = 'orange', pch = 20)
sorted_lm = lm(data$Weight_Sorted ~ data$Pieces_Sorted, data = data_srtdpcsWO)
abline(sorted_lm)
sorted_lm_sum = summary(sorted_lm)
sorted_lm_r2 = sorted_lm_sum$adj.r.squared
mylabel = bquote(italic(R)^2 == .(format(img_rawsrt_r2, digits = 3)))
text(x = 2, y = 16, labels = mylabel)
plot(data$Pieces_Sorted[data$Pieces_Sorted<100], data$Weight_Sorted[data$Pieces_Sorted<100], main = "Comparison: Sorted Pieces vs. Sorted Weight (% of area)", xlab = "Sorted Pieces.", ylab ="Sorted Weight", col = 'orange', pch = 20)
sorted_lm = lm(data$Weight_Sorted ~ data$Pieces_Sorted, data = data_srtdpcsWO)
abline(sorted_lm)
sorted_lm_sum = summary(sorted_lm)
sorted_lm_r2 = sorted_lm_sum$adj.r.squared
mylabel = bquote(italic(R)^2 == .(format(img_rawsrt_r2, digits = 3)))
text(x = 2, y = 16, labels = mylabel)
plot(data$Pieces_Sorted[data$Pieces_Sorted<50], data$Weight_Sorted[data$Pieces_Sorted<50], main = "Comparison: Sorted Pieces vs. Sorted Weight (% of area)", xlab = "Sorted Pieces", ylab ="Sorted Weight", col = 'orange', pch = 20)
sorted_lm = lm(data$Weight_Sorted ~ data$Pieces_Sorted, data = data_srtdpcsWO)
abline(sorted_lm)
sorted_lm_sum = summary(sorted_lm)
sorted_lm_r2 = sorted_lm_sum$adj.r.squared
mylabel = bquote(italic(R)^2 == .(format(img_rawsrt_r2, digits = 3)))
text(x = 2, y = 16, labels = mylabel)
plot(data$Pieces_Sorted, data$Weight_Sorted, main = "Comparison: Sorted Pieces vs. Sorted Weight (% of area)", xlab = "Sorted Pieces", ylab ="Sorted Weight", col = 'orange', pch = 20)
sorted_lm = lm(data$Weight_Sorted ~ data$Pieces_Sorted, data = data_srtdpcsWO)
abline(sorted_lm)
sorted_lm_sum = summary(sorted_lm)
sorted_lm_r2 = sorted_lm_sum$adj.r.squared
mylabel = bquote(italic(R)^2 == .(format(img_rawsrt_r2, digits = 3)))
text(x = 2, y = 16, labels = mylabel)
plot(data$Pieces_Sorted<150, data$Weight_Sorted<150, main = "Comparison: Sorted Pieces vs. Sorted Weight (% of area)", xlab = "Sorted Pieces", ylab ="Sorted Weight", col = 'orange', pch = 20)
sorted_lm = lm(data$Weight_Sorted ~ data$Pieces_Sorted, data = data_srtdpcsWO)
abline(sorted_lm)
sorted_lm_sum = summary(sorted_lm)
sorted_lm_r2 = sorted_lm_sum$adj.r.squared
mylabel = bquote(italic(R)^2 == .(format(img_rawsrt_r2, digits = 3)))
text(x = 2, y = 16, labels = mylabel)
plot(data$Pieces_Sorted, data$Weight_Sorted, main = "Comparison: Sorted Pieces vs. Sorted Weight (% of area)", xlab = "Sorted Pieces", ylab ="Sorted Weight", col = 'orange', pch = 20)
sorted_lm = lm(data$Weight_Sorted ~ data$Pieces_Sorted, data = data_srtdpcsWO)
abline(sorted_lm)
sorted_lm_sum = summary(sorted_lm)
sorted_lm_r2 = sorted_lm_sum$adj.r.squared
mylabel = bquote(italic(R)^2 == .(format(img_rawsrt_r2, digits = 3)))
text(x = 2, y = 16, labels = mylabel)
plot(data$Pieces_Sorted, data$Weight_Sorted, main = "Comparison: Sorted Pieces vs. Sorted Weight (% of area)", xlab = "Sorted Pieces", ylab ="Sorted Weight", col = 'orange', pch = 20)
sorted_lm = lm(data$Weight_Sorted ~ data$Pieces_Sorted, data = data)
abline(sorted_lm)
sorted_lm_sum = summary(sorted_lm)
sorted_lm_r2 = sorted_lm_sum$adj.r.squared
mylabel = bquote(italic(R)^2 == .(format(img_rawsrt_r2, digits = 3)))
text(x = 2, y = 16, labels = mylabel)
plot(data$Pieces_Sorted<300, data$Weight_Sorted<300, main = "Comparison: Sorted Pieces vs. Sorted Weight (% of area)", xlab = "Sorted Pieces", ylab ="Sorted Weight", col = 'orange', pch = 20)
sorted_lm = lm(data$Weight_Sorted ~ data$Pieces_Sorted, data = data)
abline(sorted_lm)
sorted_lm_sum = summary(sorted_lm)
sorted_lm_r2 = sorted_lm_sum$adj.r.squared
mylabel = bquote(italic(R)^2 == .(format(img_rawsrt_r2, digits = 3)))
text(x = 2, y = 16, labels = mylabel)
plot(data$Pieces_Sorted<10, data$Weight_Sorted<10, main = "Comparison: Sorted Pieces vs. Sorted Weight (% of area)", xlab = "Sorted Pieces", ylab ="Sorted Weight", col = 'orange', pch = 20)
sorted_lm = lm(data$Weight_Sorted ~ data$Pieces_Sorted, data = data)
abline(sorted_lm)
sorted_lm_sum = summary(sorted_lm)
sorted_lm_r2 = sorted_lm_sum$adj.r.squared
mylabel = bquote(italic(R)^2 == .(format(img_rawsrt_r2, digits = 3)))
text(x = 2, y = 16, labels = mylabel)
plot(data$Pieces_Sorted<50, data$Weight_Sorted<50, main = "Comparison: Sorted Pieces vs. Sorted Weight (% of area)", xlab = "Sorted Pieces", ylab ="Sorted Weight", col = 'orange', pch = 20)
sorted_lm = lm(data$Weight_Sorted ~ data$Pieces_Sorted, data = data)
abline(sorted_lm)
sorted_lm_sum = summary(sorted_lm)
sorted_lm_r2 = sorted_lm_sum$adj.r.squared
mylabel = bquote(italic(R)^2 == .(format(img_rawsrt_r2, digits = 3)))
text(x = 2, y = 16, labels = mylabel)
plot(data$Pieces_Sorted[data$Pieces_Sorted<50], data$Weight_Sorted[data$Pieces_Sorted<50], main = "Comparison: Sorted Pieces vs. Sorted Weight (% of area)", xlab = "Sorted Pieces", ylab ="Sorted Weight", col = 'orange', pch = 20)
sorted_lm = lm(data$Weight_Sorted ~ data$Pieces_Sorted, data = data_srtdpcsWO)
abline(sorted_lm)
sorted_lm_sum = summary(sorted_lm)
sorted_lm_r2 = sorted_lm_sum$adj.r.squared
mylabel = bquote(italic(R)^2 == .(format(img_rawsrt_r2, digits = 3)))
text(x = 2, y = 16, labels = mylabel)
plot(data$Pieces_Sorted[data$Pieces_Sorted<300], data$Weight_Sorted[data$Pieces_Sorted<300], main = "Comparison: Sorted Pieces vs. Sorted Weight (% of area)", xlab = "Sorted Pieces", ylab ="Sorted Weight", col = 'orange', pch = 20)
sorted_lm = lm(data$Weight_Sorted ~ data$Pieces_Sorted, data = data_srtdpcsWO)
abline(sorted_lm)
sorted_lm_sum = summary(sorted_lm)
sorted_lm_r2 = sorted_lm_sum$adj.r.squared
mylabel = bquote(italic(R)^2 == .(format(img_rawsrt_r2, digits = 3)))
text(x = 2, y = 16, labels = mylabel)
# plot comparing sorted pcs to sorted weight
plot(data$Pieces_Sorted[data$Pieces_Sorted<150], data$Weight_Sorted[data$Pieces_Sorted<150], main = "Comparison: Sorted Pieces vs. Sorted Weight (% of area)", xlab = "Sorted Pieces", ylab ="Sorted Weight", col = 'orange', pch = 20)
sorted_lm = lm(data$Weight_Sorted ~ data$Pieces_Sorted, data = data_srtdpcsWO)
abline(sorted_lm)
sorted_lm_sum = summary(sorted_lm)
sorted_lm_r2 = sorted_lm_sum$adj.r.squared
mylabel = bquote(italic(R)^2 == .(format(img_rawsrt_r2, digits = 3)))
text(x = 2, y = 16, labels = mylabel)
# plot comparing sorted pcs to sorted weight
plot(data$Pieces_Sorted[data$Pieces_Sorted<150], data$Weight_Sorted[data$Pieces_Sorted<150], main = "Comparison: Sorted Pieces vs. Sorted Weight (% of area)", xlab = "Sorted Pieces", ylab ="Sorted Weight", col = 'orange', pch = 20)
sorted_lm = lm(data$Weight_Sorted ~ data$Pieces_Sorted, data = data)
abline(sorted_lm)
sorted_lm_sum = summary(sorted_lm)
sorted_lm_r2 = sorted_lm_sum$adj.r.squared
mylabel = bquote(italic(R)^2 == .(format(img_rawsrt_r2, digits = 3)))
text(x = 2, y = 16, labels = mylabel)
plot(data$Pieces_Sorted[data$Pieces_Sorted<50], data$Weight_Sorted[data$Pieces_Sorted<50], main = "Comparison: Sorted Pieces vs. Sorted Weight (% of area)", xlab = "Sorted Pieces", ylab ="Sorted Weight", col = 'orange', pch = 20)
sorted_lm = lm(data$Weight_Sorted ~ data$Pieces_Sorted, data = data)
abline(sorted_lm)
sorted_lm_sum = summary(sorted_lm)
sorted_lm_r2 = sorted_lm_sum$adj.r.squared
mylabel = bquote(italic(R)^2 == .(format(img_rawsrt_r2, digits = 3)))
text(x = 2, y = 16, labels = mylabel)
plot(data$Pieces_Sorted[data$Pieces_Sorted<50], data$Weight_Sorted[data$Pieces_Sorted<50], main = "Comparison: Sorted Pieces vs. Sorted Weight (% of area)", xlab = "Sorted Pieces", ylab ="Sorted Weight", col = 'orange', pch = 20)
sorted_lm = lm(data$Weight_Sorted ~ data$Pieces_Sorted, data = data_srtdpcsWO)
abline(sorted_lm)
sorted_lm_sum = summary(sorted_lm)
sorted_lm_r2 = sorted_lm_sum$adj.r.squared
mylabel = bquote(italic(R)^2 == .(format(img_rawsrt_r2, digits = 3)))
text(x = 2, y = 16, labels = mylabel)
# plot comparing sorted pcs to sorted weight
plot(data$Pieces_Sorted[data$Pieces_Sorted<200], data$Weight_Sorted[data$Pieces_Sorted<200], main = "Comparison: Sorted Pieces vs. Sorted Weight (% of area)", xlab = "Sorted Pieces", ylab ="Sorted Weight", col = 'orange', pch = 20)
sorted_lm = lm(data$Weight_Sorted ~ data$Pieces_Sorted, data = data_srtdpcsWO)
abline(sorted_lm)
sorted_lm_sum = summary(sorted_lm)
sorted_lm_r2 = sorted_lm_sum$adj.r.squared
mylabel = bquote(italic(R)^2 == .(format(img_rawsrt_r2, digits = 3)))
text(x = 2, y = 16, labels = mylabel)
plot(data$Pieces_Sorted[data$Pieces_Sorted<100], data$Weight_Sorted[data$Pieces_Sorted<100], main = "Comparison: Sorted Pieces vs. Sorted Weight (% of area)", xlab = "Sorted Pieces", ylab ="Sorted Weight", col = 'orange', pch = 20)
sorted_lm = lm(data$Weight_Sorted ~ data$Pieces_Sorted, data = data_srtdpcsWO)
abline(sorted_lm)
sorted_lm_sum = summary(sorted_lm)
sorted_lm_r2 = sorted_lm_sum$adj.r.squared
mylabel = bquote(italic(R)^2 == .(format(img_rawsrt_r2, digits = 3)))
text(x = 2, y = 16, labels = mylabel)
plot(data$Pieces_Sorted[data$Pieces_Sorted<100], data$Weight_Sorted[data$Pieces_Sorted<100], main = "Comparison: Sorted Pieces vs. Sorted Weight (% of area)", xlab = "Sorted Pieces", ylab ="Sorted Weight", col = 'orange', pch = 20)
sorted_lm = lm(data$Weight_Sorted[data$Pieces_Sorted<100] ~ data$Pieces_Sorted[data$Pieces_Sorted<100], data = data_srtdpcsWO)
abline(sorted_lm)
sorted_lm_sum = summary(sorted_lm)
sorted_lm_r2 = sorted_lm_sum$adj.r.squared
mylabel = bquote(italic(R)^2 == .(format(img_rawsrt_r2, digits = 3)))
text(x = 2, y = 16, labels = mylabel)
plot(data$Pieces_Sorted[data$Pieces_Sorted<100], data$Weight_Sorted[data$Pieces_Sorted<100], main = "Comparison: Sorted Pieces vs. Sorted Weight (% of area)", xlab = "Sorted Pieces", ylab ="Sorted Weight", col = 'orange', pch = 20)
sorted_lm = lm(data$Weight_Sorted[data$Pieces_Sorted<100] ~ data$Pieces_Sorted[data$Pieces_Sorted<100], data = data_srtdpcsWO)
abline(sorted_lm)
sorted_lm_sum = summary(sorted_lm)
sorted_lm_r2 = sorted_lm_sum$adj.r.squared
mylabel = bquote(italic(R)^2 == .(format(sorted_lm_r2, digits = 3)))
text(x = 2, y = 10, labels = mylabel)
plot(data$Pieces_Sorted[data$Pieces_Sorted<100], data$Weight_Sorted[data$Pieces_Sorted<100], main = "Comparison: Sorted Pieces vs. Sorted Weight (% of area)", xlab = "Sorted Pieces", ylab ="Sorted Weight", col = 'orange', pch = 20)
sorted_lm = lm(data$Weight_Sorted[data$Pieces_Sorted<100] ~ data$Pieces_Sorted[data$Pieces_Sorted<100], data = data_srtdpcsWO)
abline(sorted_lm)
sorted_lm_sum = summary(sorted_lm)
sorted_lm_r2 = sorted_lm_sum$adj.r.squared
mylabel = bquote(italic(R)^2 == .(format(sorted_lm_r2, digits = 3)))
text(x = 5, y = 10, labels = mylabel)
plot(data$Pieces_Sorted[data$Pieces_Sorted<100], data$Weight_Sorted[data$Pieces_Sorted<100], main = "Comparison: Sorted Pieces vs. Sorted Weight (% of area)", xlab = "Sorted Pieces", ylab ="Sorted Weight", col = 'orange', pch = 20)
sorted_lm = lm(data$Weight_Sorted[data$Pieces_Sorted<100] ~ data$Pieces_Sorted[data$Pieces_Sorted<100], data = data_srtdpcsWO)
abline(sorted_lm)
sorted_lm_sum = summary(sorted_lm)
sorted_lm_r2 = sorted_lm_sum$adj.r.squared
mylabel = bquote(italic(R)^2 == .(format(sorted_lm_r2, digits = 3)))
text(x = 20, y = 10, labels = mylabel)
plot(data$Pieces_Sorted[data$Pieces_Sorted<100], data$Weight_Sorted[data$Pieces_Sorted<100], main = "Comparison: Sorted Pieces vs. Sorted Weight (% of area)", xlab = "Sorted Pieces", ylab ="Sorted Weight", col = 'orange', pch = 20)
sorted_lm = lm(data$Weight_Sorted[data$Pieces_Sorted<100] ~ data$Pieces_Sorted[data$Pieces_Sorted<100], data = data_srtdpcsWO)
abline(sorted_lm)
sorted_lm_sum = summary(sorted_lm)
sorted_lm_r2 = sorted_lm_sum$adj.r.squared
mylabel = bquote(italic(R)^2 == .(format(sorted_lm_r2, digits = 3)))
text(x = 22, y = 10, labels = mylabel)
